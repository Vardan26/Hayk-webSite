(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

// Input fields
var phone = document.getElementById('phone');
var password = document.getElementById('password');
var toggleInput = document.querySelector('#remember');
var submitBtn = document.querySelector('.form__btn-submit');
console.log(password.value); // Form

var form = document.getElementById('form'); // Handlers

form.addEventListener('submit', function (event) {
  // Prevent default behaviour
  event.preventDefault();

  if (validatePhone() && validatePassword()) {
    setTimeout(function () {
      alert("form submitted");
    }, 1000);
  }
});
phone.addEventListener("focusout", validatePhone);
password.addEventListener("focusout", validatePassword); // Validators

function validatePhone() {
  // check if is empty
  if (checkIfEmpty(phone)) return; // is if it valid characters for phone number

  if (!containsCharacters(phone, 3)) return;
  return true;
}

function validatePassword() {
  // Empty check
  if (checkIfEmpty(password)) return; // Must of in certain length

  if (!meetLength(password, 5, 100)) return; // check password against our character set
  // 1- a
  // 2- a 1
  // 3- A a 1
  // 4- A a 1 @

  if (!containsCharacters(password, 2)) return;

  if (validatePhone()) {
    submitBtn.disabled = false;
  }

  toggleInput.disabled = false;
  return true;
} // Utility functions


function checkIfEmpty(field) {
  if (isEmpty(field.value.length)) {
    // set field invalid
    setInvalid(field, "".concat(field.name, " must not be empty"));
    return true;
  } else {
    // set field valid
    setValid(field);
    return false;
  }
}

function isEmpty(value) {
  if (value === '') return true;
  return false;
}

function meetLength(field, minLength, maxLength) {
  if (field.value.length >= minLength && field.value.length < maxLength) {
    setValid(field);
    return true;
  } else if (field.value.length < minLength) {
    setInvalid(field, "".concat(field.name, " must be at least ").concat(minLength, " characters long"));
    return false;
  } else {
    setInvalid(field, "".concat(field.name, " must be shorter than ").concat(maxLength, " characters"));
    return false;
  }
}

function containsCharacters(field, code) {
  var regEx;

  switch (code) {
    case 1:
      // letters
      regEx = /(?=.*[a-zA-Z])/;
      return matchWithRegEx(regEx, field, 'Must contain at least one letter');

    case 2:
      // letter and numbers
      regEx = /(?=.*\d)(?=.*[a-zA-Z])/;
      return matchWithRegEx(regEx, field, 'Must contain at least one letter and one number');

    case 3:
      // phone number
      regEx = /^[+]?[\s./0-9]*[(]?[0-9]{1,4}[)]?[-\s./0-9]*$/g;
      return matchWithRegEx(regEx, field, 'Invalid type of phone number');

    default:
      return false;
  }
}

function matchWithRegEx(regEx, field, message) {
  if (field.value.match(regEx)) {
    setValid(field);
    return true;
  } else {
    setInvalid(field, message);
    return false;
  }
}

function setInvalid(field, message) {
  field.parentElement.classList.add('label-txt--invalid');
  field.nextElementSibling.firstElementChild.innerHTML = message;
}

function setValid(field) {
  field.parentElement.classList.remove('label-txt--invalid');
  field.parentElement.classList.add('label-txt--valid');
  field.nextElementSibling.firstElementChild.innerHTML = "";
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXNzZXRzL2pzL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBO0FBQ0EsSUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsT0FBeEIsQ0FBZDtBQUNBLElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFULENBQXdCLFVBQXhCLENBQWpCO0FBQ0EsSUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsV0FBdkIsQ0FBcEI7QUFDQSxJQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixtQkFBdkIsQ0FBbEI7QUFFQSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQVEsQ0FBQyxLQUFyQixFLENBQ0E7O0FBQ0EsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsTUFBeEIsQ0FBYixDLENBRUE7O0FBQ0EsSUFBSSxDQUFDLGdCQUFMLENBQXNCLFFBQXRCLEVBQWdDLFVBQVUsS0FBVixFQUFpQjtBQUM3QztBQUNBLEVBQUEsS0FBSyxDQUFDLGNBQU47O0FBQ0EsTUFBSSxhQUFhLE1BQU0sZ0JBQWdCLEVBQXZDLEVBQTJDO0FBQ3ZDLElBQUEsVUFBVSxDQUFDLFlBQVk7QUFDbkIsTUFBQSxLQUFLLENBQUMsZ0JBQUQsQ0FBTDtBQUNILEtBRlMsRUFFUCxJQUZPLENBQVY7QUFHSDtBQUNKLENBUkQ7QUFVQSxLQUFLLENBQUMsZ0JBQU4sQ0FBdUIsVUFBdkIsRUFBbUMsYUFBbkM7QUFDQSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsVUFBMUIsRUFBc0MsZ0JBQXRDLEUsQ0FFQTs7QUFDQSxTQUFTLGFBQVQsR0FBeUI7QUFDckI7QUFDQSxNQUFJLFlBQVksQ0FBQyxLQUFELENBQWhCLEVBQXlCLE9BRkosQ0FHckI7O0FBQ0EsTUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUQsRUFBUSxDQUFSLENBQXZCLEVBQW1DO0FB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QUFWO0FBQ0EsV0FBTyxLQUFQO0FBQ0g7QUFDSjs7QUFFRCxTQUFTLFVBQVQsQ0FBb0IsS0FBcEIsRUFBMkIsT0FBM0IsRUFBb0M7QUFDaEMsRUFBQSxLQUFLLENBQUMsYUFBTixDQUFvQixTQUFwQixDQUE4QixHQUE5QixDQUFrQyxvQkFBbEM7QUFDQSxFQUFBLEtBQUssQ0FBQyxrQkFBTixDQUF5QixpQkFBekIsQ0FBMkMsU0FBM0MsR0FBdUQsT0FBdkQ7QUFDSDs7QUFFRCxTQUFTLFFBQVQsQ0FBa0IsS0FBbEIsRUFBeUI7QUFDckIsRUFBQSxLQUFLLENBQUMsYUFBTixDQUFvQixTQUFwQixDQUE4QixNQUE5QixDQUFxQyxvQkFBckM7QUFDQSxFQUFBLEtBQUssQ0FBQyxhQUFOLENBQW9CLFNBQXBCLENBQThCLEdBQTlCLENBQWtDLGtCQUFsQztBQUNBLEVBQUEsS0FBSyxDQUFDLGtCQUFOLENBQXlCLGlCQUF6QixDQUEyQyxTQUEzQyxHQUF1RCxFQUF2RDtBQUNIIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLy8gSW5wdXQgZmllbGRzXHJcbmNvbnN0IHBob25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bob25lJyk7XHJcbmNvbnN0IHBhc3N3b3JkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bhc3N3b3JkJyk7XHJcbmNvbnN0IHRvZ2dsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JlbWVtYmVyJyk7XHJcbmNvbnN0IHN1Ym1pdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX19idG4tc3VibWl0Jyk7XHJcblxyXG5jb25zb2xlLmxvZyhwYXNzd29yZC52YWx1ZSk7XHJcbi8vIEZvcm1cclxuY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb3JtJyk7XHJcblxyXG4vLyBIYW5kbGVyc1xyXG5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgLy8gUHJldmVudCBkZWZhdWx0IGJlaGF2aW91clxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICh2YWxpZGF0ZVBob25lKCkgJiYgdmFsaWRhdGVQYXNzd29yZCgpKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiZm9ybSBzdWJtaXR0ZWRcIilcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5waG9uZS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNvdXRcIiwgdmFsaWRhdGVQaG9uZSk7XHJcbnBhc3N3b3JkLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCB2YWxpZGF0ZVBhc3N3b3JkKTtcclxuXHJcbi8vIFZhbGlkYXRvcnNcclxuZnVuY3Rpb24gdmFsaWRhdGVQaG9uZSgpIHtcclxuICAgIC8vIGNoZWNrIGlmIGlzIGVtcHR5XHJcbiAgICBpZiAoY2hlY2tJZkVtcHR5KHBob25lKSkgcmV0dXJuO1xyXG4gICAgLy8gaXMgaWYgaXQgdmFsaWQgY2hhcmFjdGVycyBmb3IgcGhvbmUgbnVtYmVyXHJcbiAgICBpZiAoIWNvbnRhaW5zQ2hhcmFjdGVycyhwaG9uZSwgMykpIHJldHVybjtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZVBhc3N3b3JkKCkge1xyXG4gICAgLy8gRW1wdHkgY2hlY2tcclxuICAgIGlmIChjaGVja0lmRW1wdHkocGFzc3dvcmQpKSByZXR1cm47XHJcbiAgICAvLyBNdXN0IG9mIGluIGNlcnRhaW4gbGVuZ3RoXHJcbiAgICBpZiAoIW1lZXRMZW5ndGgocGFzc3dvcmQsIDUsIDEwMCkpIHJldHVybjtcclxuICAgIC8vIGNoZWNrIHBhc3N3b3JkIGFnYWluc3Qgb3VyIGNoYXJhY3RlciBzZXRcclxuICAgIC8vIDEtIGFcclxuICAgIC8vIDItIGEgMVxyXG4gICAgLy8gMy0gQSBhIDFcclxuICAgIC8vIDQtIEEgYSAxIEBcclxuICAgIGlmICghY29udGFpbnNDaGFyYWN0ZXJzKHBhc3N3b3JkLCAyKSkgcmV0dXJuO1xyXG5cclxuICAgIGlmICh2YWxpZGF0ZVBob25lKCkpIHtcclxuICAgICAgICBzdWJtaXRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRvZ2dsZUlucHV0LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLy8gVXRpbGl0eSBmdW5jdGlvbnNcclxuZnVuY3Rpb24gY2hlY2tJZkVtcHR5KGZpZWxkKSB7XHJcbiAgICBpZiAoaXNFbXB0eShmaWVsZC52YWx1ZS5sZW5ndGgpKSB7XHJcbiAgICAgICAgLy8gc2V0IGZpZWxkIGludmFsaWRcclxuICAgICAgICBzZXRJbnZhbGlkKGZpZWxkLCBgJHtmaWVsZC5uYW1lfSBtdXN0IG5vdCBiZSBlbXB0eWApO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBzZXQgZmllbGQgdmFsaWRcclxuICAgICAgICBzZXRWYWxpZChmaWVsZCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XHJcbiAgICBpZiAodmFsdWUgPT09ICcnKSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWVldExlbmd0aChmaWVsZCwgbWluTGVuZ3RoLCBtYXhMZW5ndGgpIHtcclxuICAgIGlmIChmaWVsZC52YWx1ZS5sZW5ndGggPj0gbWluTGVuZ3RoICYmIGZpZWxkLnZhbHVlLmxlbmd0aCA8IG1heExlbmd0aCkge1xyXG4gICAgICAgIHNldFZhbGlkKGZpZWxkKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoZmllbGQudmFsdWUubGVuZ3RoIDwgbWluTGVuZ3RoKSB7XHJcbiAgICAgICAgc2V0SW52YWxpZChcclxuICAgICAgICAgICAgZmllbGQsXHJcbiAgICAgICAgICAgIGAke2ZpZWxkLm5hbWV9IG11c3QgYmUgYXQgbGVhc3QgJHttaW5MZW5ndGh9IGNoYXJhY3RlcnMgbG9uZ2BcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0SW52YWxpZChcclxuICAgICAgICAgICAgZmllbGQsXHJcbiAgICAgICAgICAgIGAke2ZpZWxkLm5hbWV9IG11c3QgYmUgc2hvcnRlciB0aGFuICR7bWF4TGVuZ3RofSBjaGFyYWN0ZXJzYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjb250YWluc0NoYXJhY3RlcnMoZmllbGQsIGNvZGUpIHtcclxuICAgIGxldCByZWdFeDtcclxuICAgIHN3aXRjaCAoY29kZSkge1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgLy8gbGV0dGVyc1xyXG4gICAgICAgICAgICByZWdFeCA9IC8oPz0uKlthLXpBLVpdKS87XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaFdpdGhSZWdFeChyZWdFeCwgZmllbGQsICdNdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGxldHRlcicpO1xyXG4gICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgLy8gbGV0dGVyIGFuZCBudW1iZXJzXHJcbiAgICAgICAgICAgIHJlZ0V4ID0gLyg/PS4qXFxkKSg/PS4qW2EtekEtWl0pLztcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoV2l0aFJlZ0V4KFxyXG4gICAgICAgICAgICAgICAgcmVnRXgsXHJcbiAgICAgICAgICAgICAgICBmaWVsZCxcclxuICAgICAgICAgICAgICAgICdNdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGxldHRlciBhbmQgb25lIG51bWJlcidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgIC8vIHBob25lIG51bWJlclxyXG4gICAgICAgICAgICByZWdFeCA9IC9eWytdP1tcXHMuLzAtOV0qWyhdP1swLTldezEsNH1bKV0/Wy1cXHMuLzAtOV0qJC9nO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hXaXRoUmVnRXgoXHJcbiAgICAgICAgICAgICAgICByZWdFeCxcclxuICAgICAgICAgICAgICAgIGZpZWxkLFxyXG4gICAgICAgICAgICAgICAgJ0ludmFsaWQgdHlwZSBvZiBwaG9uZSBudW1iZXInXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaFdpdGhSZWdFeChyZWdFeCwgZmllbGQsIG1lc3NhZ2UpIHtcclxuICAgIGlmIChmaWVsZC52YWx1ZS5tYXRjaChyZWdFeCkpIHtcclxuICAgICAgICBzZXRWYWxpZChmaWVsZCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNldEludmFsaWQoZmllbGQsIG1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0SW52YWxpZChmaWVsZCwgbWVzc2FnZSkge1xyXG4gICAgZmllbGQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdsYWJlbC10eHQtLWludmFsaWQnKTtcclxuICAgIGZpZWxkLm5leHRFbGVtZW50U2libGluZy5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUwgPSBtZXNzYWdlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRWYWxpZChmaWVsZCkge1xyXG4gICAgZmllbGQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdsYWJlbC10eHQtLWludmFsaWQnKTtcclxuICAgIGZpZWxkLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbGFiZWwtdHh0LS12YWxpZCcpO1xyXG4gICAgZmllbGQubmV4dEVsZW1lbnRTaWJsaW5nLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTCA9IFwiXCI7XHJcbn1cclxuIl19
